# -*- mode: yaml -*-
# Config file for ReBench
standard_experiment: all
standard_data_file: 'zero-overhead.data'

# settings and requirements for statistic evaluation
# Note, this is only used for explorative runs, for the final experiments, we
# rely soley on a fixed configuration of data points.
statistics:
    confidence_level: 0.95

runs:
    # Fixed minimum number of data points. Typically, the benchmarks are
    # configure to produce a specific number of datapoints independently of
    # this setting. ReBench will repeat the benchmarks until it got at least
    # this many data points.
    number_of_data_points: 100

# settings for quick runs, useful for fast feedback during experiments
quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    # Marcobenchmarks to be executed on one of the SOM implementations
    macro-steady:
        gauge_adapter: RebenchLog
        command: &MACRO_COMMAND " -cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody Examples/Benchmarks/BenchmarkHarness.som  %(benchmark)s "
        max_runtime: 60000
        benchmarks: &MACRO_STEADY
            - Richards:
                extra_args: "1000 0 20"
            - DeltaBlue:
                extra_args: "1000 0 1200"
            - Mandelbrot:
                extra_args: "1000 0 1000"
            - NBody:
                extra_args: "1000 0 50000"

    # Microbenchmarks to be executed on one of the SOM implementations
    micro-steady:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 60000
        benchmarks: &MICRO_STEADY
            - Bounce:
                extra_args: "350 0 200"
            - BubbleSort:
                extra_args: "350 0 300"
            - Dispatch:
                extra_args: "350 0 2000"
            - Fannkuch:
                extra_args: "350 0 8"
            - Fibonacci:
                extra_args: "350 0 300"
            - FieldLoop:
                extra_args: "350 0 300"
            - IntegerLoop:
                extra_args: "350 0 800"
            - List:
                extra_args: "350 0 200"
            - Loop:
                extra_args: "350 0 1000"
            - Permute:
                extra_args: "350 0 300"
            - Queens:
                extra_args: "350 0 200"
            - QuickSort:
                extra_args: "350 0 300"
            - Recurse:
                extra_args: "350 0 300"
            - Sieve:
                extra_args: "350 0 500"
            - Storage:
                extra_args: "350 0 200"
            - Sum:
                extra_args: "350 0 1000"
            - Towers:
                extra_args: "350 0 200"
            - TreeSort:
                extra_args: "1000 0 100"
            - WhileLoop:
                extra_args: "350 0 3000"

    # Configuration of the Macrobenchmarks for SOM to be executed in the
    # context of the OMOP, or without it.
    # The results are shown in the paper in Figure 5.
    macro-steady-omop:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody Examples/Benchmarks/OmopHarness.som %(benchmark)s %(variable)s "
        max_runtime: 60000
        benchmarks: *MACRO_STEADY
        variable_values:
            - "true"
            - "false"

    # Configuration of the Microbenchmarks for SOM to be executed in the
    # context of the OMOP, or without it.
    # The results are shown in the paper in Figure 5.
    micro-steady-omop:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk Examples/Benchmarks/OmopHarness.som %(benchmark)s %(variable)s "
        max_runtime: 60000
        benchmarks: *MICRO_STEADY
        variable_values:
            - "true"
            - "false"
    
    # Configuration of the SOM Reflection microbenchmarks
    # The results are shown in the paper in Figure 7.
    reflection:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:Examples/Benchmarks/DoesNotUnderstand Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 60000
        benchmarks:
            - DirectAdd:
                extra_args: 150 0 8000
            - DnuAdd:
                extra_args: 150 0 8000
            - DnuPerformAdd:
                extra_args: 150 0 8000
            - PerformAdd:
                extra_args: 150 0 8000
    
    # Configuration of the SOM Proxy microbenchmarks
    # The results are shown in the paper in Figure 7.
    proxy:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:Examples/Benchmarks/DoesNotUnderstand Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 60000
        benchmarks:
            - ProxyAdd:
                extra_args: 350 0 8000
            - IndirectAdd:
                extra_args: 350 0 8000
    
    # Configuration of the SOM OMOP microbenchmarks
    # The results are shown in the paper in Figure 4.
    omop:
        gauge_adapter: RebenchLog
        command: " -cp Smalltalk:Examples/Benchmarks/OMOP Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        max_runtime: 60000
        benchmarks:
            - AddDispatch:
                extra_args: 150 0 2000
                warmup: 0
            - AddDispatchEnforced:
                extra_args: 150 0 2000
                warmup: 0
            - AddFieldWrite:
                extra_args: 150 0 2000
                warmup: 0
            - AddFieldWriteEnforced:
                extra_args: 150 0 2000
                warmup: 0
            - Dispatch:
                extra_args: 150 0 2000
                warmup: 0
            - DispatchEnforced:
                extra_args: 150 0 2000
                warmup: 0
            - DispatchEnforcedStd:
                extra_args: 150 0 2000
                warmup: 0
            - FieldRead:
                extra_args: 150 0 2000
                warmup: 0
            - FieldReadEnforced:
                extra_args: 150 0 2000
                warmup: 0
            - GlobalRead:
                extra_args: 150 0 2000
                warmup: 0
            - GlobalReadEnforced:
                extra_args: 150 0 2000
                warmup: 0
            - ReqPrim:
                extra_args: 150 0 2000
                warmup: 0
            - ReqPrimEnforced:
                extra_args: 150 0 2000
                warmup: 0
    
    # Configuration of the Java Reflection benchmarks, which are discussed in
    # section 2.2.
    JavaReflection:
        location: .
        gauge_adapter: JMH
        command: -jar implementations/cost-of-reflection/java/reflection/target/microbenchmarks.jar -wi 3 -i 25 -f 4 %(benchmark)s
        benchmarks:
            - benchmarks.DynamicProxy.directAdd
            - benchmarks.DynamicProxy.proxiedAdd
            - benchmarks.MethodInvocation.testDirectCall
            - benchmarks.MethodInvocation.testReflectiveCallFromMutableVar
            - benchmarks.MethodInvocation.testReflectiveCallFromFinalVar
            - benchmarks.MethodInvocation.testReflectiveCallFromStaticFinalVar
            - benchmarks.MethodInvocation.testHandleCallFromMutableVar
            - benchmarks.MethodInvocation.testHandleCallFromFinalVar
            - benchmarks.MethodInvocation.testHandleCallFromStaticFinalVar

    # Configuration of the PyPy Reflection benchmarks, which are discussed in
    # section 2.2.
    PyPyReflection:
        location: .
        gauge_adapter: RebenchLog
        command: implementations/cost-of-reflection/python/%(benchmark)s
        benchmarks:
            - OMOPDirect:
                command: mini_omop.py Direct
                extra_args: &PyOmopArgs 100 0 1000
            - OMOPProxy:
                command: mini_omop.py Proxy
                extra_args: *PyOmopArgs
            - MethodDirect:
                command: method_invocation.py Direct
                extra_args: &PyMethArgs 100 0 1000
            - MethodDirectStatic:
                command: method_invocation.py DirectStatic
                extra_args: *PyMethArgs
            - MethodReflectiveBound:
                command: method_invocation.py ReflectiveBound
                extra_args: *PyMethArgs
            - MethodReflectiveUnbound:
                command: method_invocation.py ReflectiveUnbound
                extra_args: *PyMethArgs
            - MethodReflectiveStaticBound:
                command: method_invocation.py ReflectiveStaticBound
                extra_args: *PyMethArgs
            - MethodReflectiveStaticUnbound:
                command: method_invocation.py ReflectiveStaticUnbound
                extra_args: *PyMethArgs
            - DynamicProxy:
                command: dynamic_proxy.py Proxy
                extra_args: &PyProxyArgs 100 0 1000
            - DynamicDirect:
                command: dynamic_proxy.py Direct
                extra_args: *PyProxyArgs

    # The configuration of the JRuby psd.rb kernel benchmarks.
    # The results are shown in the paper in Figure 6.
    ruby-image-libs:
        gauge_adapter: PlainSecondsLog
        command: -Ilib/bench/benchmarks/chunky_png/chunky_png/lib -Ilib/bench/benchmarks/psd.rb -Ilib/bench/benchmarks/psd.rb/psd.rb/lib lib/bench/benchmarks/psd.rb/benchmarks/%(benchmark)s.rb --loopn
        benchmarks:
            - Compose Darken:
                command: psd-compose-darken
                extra_args: 100 100000
            - Compose Normal:
                command: psd-compose-normal
                extra_args: 100 100000
            - Compose Multiply:
                command: psd-compose-multiply
                extra_args: 100 100000
            - Compose Color Burn:
                command: psd-compose-color-burn
                extra_args: 100 100000
            - Compose Linear Burn:
                command: psd-compose-linear-burn
                extra_args: 100 100000
            - Compose Lighten:
                command: psd-compose-lighten
                extra_args: 100 100000
            - Compose Screen:
                command: psd-compose-screen
                extra_args: 100 100000
            - Compose Color Dodge:
                command: psd-compose-color-dodge
                extra_args: 100 100000
            - Compose Linear Dodge:
                command: psd-compose-linear-dodge
                extra_args: 100 100000
            - Compose Overlay:
                command: psd-compose-overlay
                extra_args: 100 100000
            - Compose Soft Light:
                command: psd-compose-soft-light
                extra_args: 100 100000
            - Compose Hard Light:
                command: psd-compose-hard-light
                extra_args: 100 100000
            - Compose Vivid Light:
                command: psd-compose-vivid-light
                extra_args: 100 100000
            - Compose Linear Light:
                command: psd-compose-linear-light
                extra_args: 100 100000
            - Compose Pin Light:
                command: psd-compose-pin-light
                extra_args: 100 100000
            - Compose Hard Mix:
                command: psd-compose-hard-mix
                extra_args: 100 100000
            - Compose Difference:
                command: psd-compose-difference
                extra_args: 100 100000
            - Compose Exclusion:
                command: psd-compose-exclusion
                extra_args: 100 100000

# VMs have a name and are specified by a path and the binary to be executed.
virtual_machines:
    # Standard Java 8, used for the reflection benchmarks
    Java:
        path: /usr/bin/
        binary: java
        args: "-server "
    # PyPy, used for the reflection benchmarks
    PyPy:
        path: /usr/bin/
        binary: env
        args: "pypy "
    
    # The configuration for TruffleSOM with and without the OMOP.
    # TruffleSOM is referred to as SOM_PE in the paper.
    # The different settings of Graal are used to see the impact of their
    # optimization settings, which have been changing in the time frame of these
    # experiments.
    TruffleSOM-graal-old-splitting:
        path: implementations/TruffleSOM
        binary: ../graal.sh
        args: " -G:+TruffleSplitting -G:-TraceTruffleInlining -G:-TraceTruffleCompilation -Xbootclasspath/a:build/classes:../graal/truffle.jar som.vm.Universe"    
    TruffleSOM-graal:
        path: implementations/TruffleSOM
        binary: ../graal.sh
        args: " -G:+TruffleSplittingNew -G:-TraceTruffleInlining -G:-TraceTruffleCompilation -Xbootclasspath/a:build/classes:../graal/truffle.jar som.vm.Universe"
    TruffleSOM-graal-split-extra:
        path: implementations/TruffleSOM
        binary: ../graal.sh
        args: " -G:+TruffleSplittingNew -G:-TruffleSplittingClassInstanceStamps -G:-TraceTruffleInlining -G:-TraceTruffleCompilation -Xbootclasspath/a:build/classes:../graal/truffle.jar som.vm.Universe"
    TruffleSOM-graal-no-split:
        path: implementations/TruffleSOM
        binary: ../graal.sh
        args: " -G:-TruffleSplitting -G:-TraceTruffleInlining -G:-TraceTruffleCompilation -Xbootclasspath/a:build/classes:../graal/truffle.jar som.vm.Universe"
    TruffleSOM-OMOP-graal-old-splitting:
        path: implementations/TruffleSOM-OMOP
        binary: ../graal.sh
        args: " -G:+TruffleSplitting -G:-TraceTruffleInlining -G:-TraceTruffleCompilation -Xbootclasspath/a:build/classes:../graal/truffle.jar som.vm.Universe"
    TruffleSOM-OMOP-graal:
        path: implementations/TruffleSOM-OMOP
        binary: ../graal.sh
        args: " -G:+TruffleSplittingNew -G:-TraceTruffleInlining -G:-TraceTruffleCompilation -Xbootclasspath/a:build/classes:../graal/truffle.jar som.vm.Universe"
    TruffleSOM-OMOP-graal-no-stamp:
        path: implementations/TruffleSOM-OMOP
        binary: ../graal.sh
        args: " -G:+TruffleSplittingNew -G:-TruffleSplittingClassInstanceStamps -G:-TraceTruffleInlining -G:-TraceTruffleCompilation -Xbootclasspath/a:build/classes:../graal/truffle.jar som.vm.Universe"

    # The configurations for RTruffleSOM, with and without the OMOP.
    # RTruffleSOM is referred to as SOM_MT in the paper.
    RTruffleSOM-jit:
        path: implementations/RTruffleSOM
        binary: RTruffleSOM-jit
        args: ""
    RTruffleSOM-OMOP-jit:
        path: implementations/RTruffleSOM-OMOP
        binary: RTruffleSOM-jit
        args: ""
    
    # The configurations of JRuby with and without the use of dispatch chains.
    JRuby:
        path: implementations/jruby-benchmarks
        binary: ../jruby.sh
        args: "-J-Xmx2G -J-d64 -J-server -J-G:+TruffleCompilationExceptionsAreFatal -X+T -Ilib "
    JRuby-meta-uncached:
        path: implementations/jruby-benchmarks
        binary: ../jruby.sh
        args: "-J-Xmx2G -J-d64 -J-server -J-G:+TruffleCompilationExceptionsAreFatal -Xtruffle.dispatch.metaprogramming_always_uncached=true -X+T -Ilib "
        

# define the benchmarks to be executed for a re-executable benchmark run
experiments:

    # The results of this experiment are shown in the paper in Figure 4.
    OMOP-Micro:
        actions: benchmark
        benchmark:
            - omop
        executions:
            - TruffleSOM-OMOP-graal
            - TruffleSOM-OMOP-graal-old-splitting
            - TruffleSOM-OMOP-graal-no-stamp
            - RTruffleSOM-OMOP-jit

    # The results of this experiment are discussed in section 2.2.
    JavaReflection:
        actions: benchmark
        benchmark: JavaReflection
        executions: Java
    
    # The results of this experiment are discussed in section 2.2.
    PyPyReflection:
        actions: benchmark
        benchmark: PyPyReflection
        executions: PyPy

    # The results of this experiment are shown in the paper in Figure 7.
    Reflection:
        actions: benchmark
        benchmark:
            - reflection
            - proxy
        executions:
            - TruffleSOM-OMOP-graal
            - TruffleSOM-OMOP-graal-old-splitting
            - TruffleSOM-OMOP-graal-no-stamp
            - RTruffleSOM-OMOP-jit
            - RTruffleSOM-jit
            - TruffleSOM-graal-split-extra
            - TruffleSOM-graal-old-splitting
    
    # The results of this experiment are shown in the paper in Figure 5.
    OMOP-Standard:
        actions: benchmark
        benchmark:
            - macro-steady-omop
            - micro-steady-omop
        executions:
            - TruffleSOM-OMOP-graal
            - TruffleSOM-OMOP-graal-old-splitting
            - TruffleSOM-OMOP-graal-no-stamp
            - RTruffleSOM-OMOP-jit

    # The results of this experiment are shown in the paper in Figure 6.
    JRuby:
        actions: benchmark
        benchmark: ruby-image-libs
        executions:
            - JRuby
            - JRuby-meta-uncached
