# -*- mode: yaml -*-
# Config file for ReBench
standard_experiment: all
standard_data_file: 'benchmark.data'

statistics:
    confidence_level: 0.95

runs:
    number_of_data_points: 10

quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

are_we_fast_yet:
    ## this is ignored by rebench
    iteration_numbers:
        fast_vm:      &FAST_VM      3000
        slow_vm:      &SLOW_VM      250
        very_slow_vm: &VERY_SLOW_VM 100

# definition of benchmark suites
benchmark_suites:
    steady-som:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(variable)s "
        max_runtime: 5000
        variable_values: *FAST_VM ## the number iterations measured
        location: benchmarks/SOM
        benchmarks: &BENCHMARKS
            - DeltaBlue:
                extra_args: 12000
            - Richards:
                extra_args: 100
            - Json:
                extra_args: 100
            - CD:
                extra_args: 250
            - Havlak:
                extra_args: 1500
            
            - Bounce:
                extra_args: 1500
            - List:
                extra_args: 1500
            - Mandelbrot:
                extra_args: 500
            - NBody:
                extra_args: 250000
            - Permute:
                extra_args: 1000
            - Queens:
                extra_args: 1000
            - Sieve:
                extra_args: 3000
            - Storage:
                extra_args: 1000
            - Towers:
                extra_args: 600
            
    steady-somns:
        gauge_adapter: RebenchLog
        command: " Harness.som %(benchmark)s %(variable)s "
        location: benchmarks/SOMns
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 6000
        benchmarks: *BENCHMARKS

    steady-java:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s %(variable)s "
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 6000
        benchmarks: *BENCHMARKS

    steady-ruby:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 6000
        benchmarks: *BENCHMARKS
    
    steady-crystal:
        gauge_adapter: RebenchLog
        location: benchmarks/Crystal
        command: "./harness %(benchmark)s %(variable)s "
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 6000
        benchmarks: *BENCHMARKS

    ruby-interp:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: *VERY_SLOW_VM ## the number iterations measured
        max_runtime: 6000
        benchmarks: *BENCHMARKS
    
    ruby-indy:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: *SLOW_VM ## the number iterations measured
        max_runtime: 6000
        benchmarks: *BENCHMARKS
    
    ruby-rbx:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness-rbx.rb %(benchmark)s %(variable)s "
        variable_values: *VERY_SLOW_VM ## the number iterations measured
        max_runtime: 6000
        benchmarks: *BENCHMARKS
    
    steady-js:
        gauge_adapter: RebenchLog
        location: benchmarks/JavaScript
        command: "harness.js %(benchmark)s %(variable)s "
        variable_values: *FAST_VM ## the number iterations measured
        max_runtime: 6000
        benchmarks: *BENCHMARKS

# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    # JVMs
    Java8U66:
        path: implementations/
        binary: java8.sh

    # SOM VMs
    TruffleSOM-TOM-Enterprise:
        path: implementations/
        binary: TruffleSOM-TOM-e.sh
        args: "-vv "

    SOMns-Enterprise:
        path: implementations/
        binary: SOMns-e.sh

    # Ruby VMs
    JRubyTruffleEnterprise:
        path: implementations/
        binary: jruby-truffle-e.sh
    JRubyJ8:
        path: implementations/
        binary: jruby-j8.sh
    MRI23:
        path: implementations/
        binary: mri-23.sh
    RBX314:
        path: implementations/
        binary: rbx-314.sh

    Crystal:
        path: implementations/
        binary: crystal.sh

    # JavaScript VMs
    Node:
        path: implementations/
        binary: node.sh
    GraalJS:
        path: implementations/
        binary: graaljs.sh

experiments:
    steady-java:
        description: Measure steady state performance
        benchmark: steady-java
        executions:
            - Java8U66
    steady-som:
        executions:
            - SOMns-Enterprise:
                benchmark: steady-somns
            - TruffleSOM-TOM-Enterprise:
                benchmark: steady-som
    steady-ruby:
        benchmark: steady-ruby
        executions:
            - JRubyTruffleEnterprise
    steady-crystal:
        benchmark: steady-crystal
        executions: Crystal
    steady-js:
        benchmark:
            - steady-js
        executions:
            - Node
            - GraalJS
    ruby-others:
        executions:
            - MRI23:
                benchmark: ruby-interp
            - JRubyJ8:
                benchmark: ruby-indy
            - RBX314:
                benchmark: ruby-rbx
            
